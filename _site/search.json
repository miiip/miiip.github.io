[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The baby researcher",
    "section": "",
    "text": "Using fast.ai to detect web defacement\n\n\n\n\n\n\n\nideas\n\n\ncode\n\n\nml-cyber\n\n\n\n\n\n\n\n\n\n\n\nApr 15, 2023\n\n\nMihail Plesa\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nApr 14, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nApr 11, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi there!\nMy name is Mihail (the guy next to that adorable little girl). I’m a reserach security enginner. This means I read research papers, publish new ideas and implement various cybersecurity tools. My research focuses on machine learning applications in cybersecurity and privacy. I’m also a PhD student at the Faculty of Mathematics and Informatics of the University of Bucharest. My thesis is about applications of Spiking Neural P systems in cybersecurity and especially in cryptography."
  },
  {
    "objectID": "publications.html",
    "href": "publications.html",
    "title": "Publications",
    "section": "",
    "text": "Journal articles   \n\n    \n        A New Quantum Encryption Scheme\n    \n    \n        A quantum safe analysis of Helios voting system\n    \n    \n        Privacy-Preserving Clustering: A New Approach Based on Invariant Order Encryption\n    \n    \n        Self-repairing mechanical components using artificial Intelligence\n    \n    \n        Anonymous Spam Detection Service Based on Somewhat Homomorphic Encryption\n    \n    \n        A key agreement protocol based on spiking neural P systems with anti-spikes\n    \n\n Conference articles   \n\n        \n            Hybrid scheme for secure communications using quantum and classical mechanisms\n        \n        \n            Using quantum communications for maritime signal flags\n        \n\n\nNo matching items"
  },
  {
    "objectID": "publications.html",
    "href": "publications.html",
    "title": "Publications",
    "section": "",
    "text": "First Item\n    A custom value\n  \n  \n    Second Item\n    A second custom value\n  \n\n\nNo matching items"
  },
  {
    "objectID": "presentations.html",
    "href": "presentations.html",
    "title": "Presentations",
    "section": "",
    "text": "How to implement a quantum key distribution protocol on IBM's quantum computer (a practical example of quantum programming)\n    DefCamp 2019 presentation\n  \n  \n    Augment cybersecurity through A.I.\n    DefCamp 2022 presentation\n  \n\n\nNo matching items"
  },
  {
    "objectID": "posts/is-it-hacked-creating-a-model-from-your-own-data.html",
    "href": "posts/is-it-hacked-creating-a-model-from-your-own-data.html",
    "title": "Using fast.ai to detect web defacement",
    "section": "",
    "text": "In 2015 the idea of creating a computer system that could recognise birds was considered so outrageously challenging that it was the basis of this XKCD joke:\n\n\n\nimage.png\n\n\nBut today, we can do exactly that, in just a few minutes, using entirely free resources!\nThe basic steps we’ll take are:\n\nUse DuckDuckGo to search for images of “bird photos”\nUse DuckDuckGo to search for images of “forest photos”\nFine-tune a pretrained neural network to recognise these two groups\nTry running this model on a picture of a bird and see if it works."
  },
  {
    "objectID": "posts/is-it-hacked-creating-a-model-from-your-own-data.html#is-it-a-bird",
    "href": "posts/is-it-hacked-creating-a-model-from-your-own-data.html#is-it-a-bird",
    "title": "Using fast.ai to detect web defacement",
    "section": "",
    "text": "In 2015 the idea of creating a computer system that could recognise birds was considered so outrageously challenging that it was the basis of this XKCD joke:\n\n\n\nimage.png\n\n\nBut today, we can do exactly that, in just a few minutes, using entirely free resources!\nThe basic steps we’ll take are:\n\nUse DuckDuckGo to search for images of “bird photos”\nUse DuckDuckGo to search for images of “forest photos”\nFine-tune a pretrained neural network to recognise these two groups\nTry running this model on a picture of a bird and see if it works."
  },
  {
    "objectID": "posts/is-it-hacked-creating-a-model-from-your-own-data.html#step-1-download-images-of-birds-and-non-birds",
    "href": "posts/is-it-hacked-creating-a-model-from-your-own-data.html#step-1-download-images-of-birds-and-non-birds",
    "title": "Using fast.ai to detect web defacement",
    "section": "Step 1: Download images of birds and non-birds",
    "text": "Step 1: Download images of birds and non-birds\n::: {.cell _kg_hide-input=‘true’ execution=‘{“iopub.execute_input”:“2023-04-12T04:20:53.650799Z”,“iopub.status.busy”:“2023-04-12T04:20:53.650486Z”,“iopub.status.idle”:“2023-04-12T04:20:53.655767Z”,“shell.execute_reply”:“2023-04-12T04:20:53.655037Z”,“shell.execute_reply.started”:“2023-04-12T04:20:53.650765Z”}’ trusted=‘true’ execution_count=4}\nfrom duckduckgo_search import ddg_images\nfrom fastcore.all import *\n\ndef search_images(term, max_images=30):\n    print(f\"Searching for '{term}'\")\n    return L(ddg_images(term, max_results=max_images)).itemgot('image')\n:::\nLet’s start by searching for a bird photo and seeing what kind of result we get. We’ll start by getting URLs from a search:\n\n#NB: `search_images` depends on duckduckgo.com, which doesn't always return correct responses.\n#    If you get a JSON error, just try running it again (it may take a couple of tries).\nurls = search_images('example of defaced webpage', max_images=1)\nurls[0]\n\nSearching for 'example of defaced webpage'\n\n\n'https://blog.sucuri.net/wp-content/uploads/2020/04/image1-600x419.png'\n\n\n…and then download a URL and take a look at it:\n\nfrom fastdownload import download_url\ndest = 'defaced.jpg'\ndownload_url(urls[0], dest, show_progress=False)\n\nfrom fastai.vision.all import *\nim = Image.open(dest)\nim.to_thumb(256,256)\n\n\n\n\nNow let’s do the same with “forest photos”:\n\ndownload_url(search_images('example of normal webpage', max_images=1)[0], 'non-defaced.jpg', show_progress=False)\nImage.open('non-defaced.jpg').to_thumb(256,256)\n\nSearching for 'example of normal webpage'\n\n\n\n\n\nOur searches seem to be giving reasonable results, so let’s grab a few examples of each of “bird” and “forest” photos, and save each group of photos to a different folder (I’m also trying to grab a range of lighting conditions here):\n\n!ls\n\n__notebook_source__.ipynb  bird_or_not  forest.jpg\nbird.jpg           defaced.jpg  non-defaced.jpg\n\n\n\nsearches = 'defaced webpage','normal webpage'\npath = Path('defaced_or_not')\nfrom time import sleep\n\nfor o in searches:\n    dest = (path/o)\n    print(path, o , dest)\n    dest.mkdir(exist_ok=True, parents=True)\n    download_images(dest, urls=search_images(f'example of an university {o}'))\n    sleep(10)\n    download_images(dest, urls=search_images(f'example of a governmental {o}'))\n    sleep(10)\n    download_images(dest, urls=search_images(f'example of a finance institution {o}'))\n    sleep(10)\n    resize_images(path/o, max_size=400, dest=path/o)\n\ndefaced_or_not defaced webpage defaced_or_not/defaced webpage\nSearching for 'example of an university defaced webpage'\nSearching for 'example of a governmental defaced webpage'\nSearching for 'example of a finance institution defaced webpage'\ndefaced_or_not normal webpage defaced_or_not/normal webpage\nSearching for 'example of an university normal webpage'\nSearching for 'example of a governmental normal webpage'\nSearching for 'example of a finance institution normal webpage'\n\n\n/opt/conda/lib/python3.7/site-packages/PIL/Image.py:963: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n  \"Palette images with Transparency expressed in bytes should be \"\n/opt/conda/lib/python3.7/site-packages/PIL/Image.py:963: UserWarning: Palette images with Transparency expressed in bytes should be converted to RGBA images\n  \"Palette images with Transparency expressed in bytes should be \"\n/opt/conda/lib/python3.7/site-packages/PIL/Image.py:1018: UserWarning: Couldn't allocate palette entry for transparency\n  warnings.warn(\"Couldn't allocate palette entry for transparency\")\n\n\n\n!ls defaced_or_not\n\n'defaced webpage'  'normal webpage'\n\n\n\nprint(os.listdir(path/'defaced webpage'))\n\n['1cea845b-8f24-44d6-b11f-a9e64301d95e.jpeg', 'c1d6233a-a8ad-4ebb-bf63-adf6ad0d5df0.jpg', '6133cd19-1b61-4dd6-bcec-9d3813adb8b0.png', '2705c10c-8100-44e6-8082-601d8761e733.png', '1a1004e4-b039-4646-b64f-d088f71ebbac.jpg', '0e33da56-8106-46c1-8c36-287912ad486a.jpg', 'c47a6f95-4055-4275-8421-7b9d36f29878.png', '9e38f77e-8445-42f4-9c65-868c15fc3af6.jpg', '7cbe0812-464b-4c41-a9d5-d15d6564375e.png', 'd1cf0d50-6501-435c-9239-9b3c2eeba0a6.jpg', '5027d237-71d5-4455-b36f-99664861ac57.png', '76b84e2d-b823-46db-9f02-b3ac454154b4.jpg', '98060270-3dd4-43de-93d2-53812c1df1f1.jpg', '0cb192fe-5fa0-4017-9a65-ab34a398c61d.png', '1f49066b-a9ba-418d-b583-adad6eced08f.jpg', '0ef1ef38-5ebb-4d7e-aecd-d2be90f68cc7.jpg', '9ad11dd8-c6ea-4076-ad7d-8ad121c8d71c.jpg', 'f5a042fc-4445-475a-abb9-c6ec6172b804.jpg', '3b6e4ba5-98c8-4d49-ab7d-5ecea8bf5eab.jpg', '251fc147-f9e4-44cf-a296-411b14f11fac.jpg', '4edf3e27-cad0-408f-8558-d02b9c9438e6.jpg', 'a164042c-4920-4b4c-8009-5d034f094083.jpg', '53bf63f2-3084-487a-834a-18f5510dd893.png', '03ab9ead-bf6d-4180-a11f-d56e069ae56c.jpg', '4f897bc6-e910-4a8a-b80d-722b7734cce1.jpg', 'f0c33720-f267-4c07-8216-b3a08fa84ff2.png', 'f554f21c-6198-4c34-b04c-c90c6fe77795.png', '695bd1f9-cc0e-40cf-80ea-78f4da0a497b.jpg', '4fa86c78-2326-4853-9ece-1f753233176b.jpg', '003da304-6be8-479d-be22-93f6bfb778b1.jpg', 'e8fcf9ea-5e46-4839-800f-0bc73cb31efa.png', 'a8301f37-0a92-45dc-965a-5de50ffef513.jpg', 'b479dfa1-8401-49ef-a5d7-19b3a68b1f1c.png', '15372577-42c6-4f81-aefe-45219c5e01ad.png', '293bcc32-854d-47ec-a4ff-11d8c61523f2.jpg', '32af3bfa-717b-4a67-8e3f-897172db62cd.jpg', 'f1c2bf97-67a9-46b7-8133-b4cce482cd60.jpg', '12cdb368-83ae-4f3b-912d-f6a141fd6cd7.jpg', 'f043721b-3277-4eab-abd2-b34100cfe117.jpg', 'e3836282-ced6-43b2-8dd7-61222c5a166b.jpg', '69098d04-43dd-40a5-949d-ca9f6fc2bf46.jpg', '9ff76d90-0a0a-442d-931e-a7ac323913e0.jpg', 'f336ae85-10c4-492f-a834-7b8f729a4782.jpg', 'c5b55513-625d-4832-9fef-5f804906a01e.jpg', 'c384fe36-fddc-42f6-9cbc-3eff5df179cb.png', '97556361-4a32-44a4-bf81-60484e5661a6.jpg', '16e431d4-d3f8-4890-a8c0-b9e452ff0122.jpg', 'e871a1d0-90ea-4c22-9c22-6a49df3aafe8.jpg', 'f5be9771-ceb6-4110-b508-bc9b757fd9e2.png', '27f7de68-6c1b-4e00-9c99-870ffc71347d.jpg', 'c177199a-f8e6-46a4-88ac-59782a6fcca0.jpg', 'ffea5772-3602-4b4e-a49e-54ed0c8435f6.png', '6b3c7282-1fb7-426b-8f20-1f886ce6cac3.jpg', 'be687df0-d7d6-4c10-ad2a-968291b9c468.jpg', 'eba2aaef-7fb7-4fbe-b6a7-f66c82e5a5cc.jpg', 'e46052bc-fd36-42f4-b6bf-a2997779eb08.png', 'a23e0b94-febd-4af4-b118-8bab306e90b0.png', '344eb5a9-523c-476f-b17d-abb8ce2f2dd3.png', 'c07c3b26-dc23-4edd-81d2-7990c534a5ab.jpg', '39de6198-4424-4b46-9fdb-c87ab65bef66.png', '85e71683-8c0f-437e-b542-113c3280787c.gif', 'fc90175f-10a7-4d09-a8ee-378de8736b52.jpg', '9f5a3bb2-c012-4be5-afc3-b09f191ac4eb.jpg', '0113ba60-f861-4fdc-ab8b-eb9511495f4e.png', '8e683ba9-ac69-459f-bb65-2611737b6692.jpg', 'e06d2661-81b9-4dc0-a9fc-15b418b050d6.png', '05cefdc5-2961-4770-b308-b06a0fa82b2e.png', 'eaa1c6f5-910c-45d0-a7c4-9ac53c64b622.png', '7afd0834-855c-4c55-af31-3e40b2d6a6b9.jpg', '3ac9b16c-394c-407e-969e-f1e577fdb7db.jpg', '14627cb7-76e2-4414-9c49-e20ae6341be4.jpg', '2b612c7d-6144-4ba6-a16e-15133a059103.jpg', 'dbab70b0-50ec-4d78-9278-7f5441211793.png', 'fc244f3e-6d22-4bc4-9b4f-57699e0243b0.jpg', 'b42607a2-9678-47bc-8820-3d1cb9fdc00e.png', 'c650aeba-d676-4898-9bd5-094ad9fa4674.png', 'c40f4ee3-2eb9-479b-b297-2e2032bac1ac.png', '796bae6e-a55b-4064-b1b9-3b8823acb34e.jpg', '2d27f915-0a9b-4893-baf2-c6014d6175d6.jpg', 'b763e351-c5ab-4e8e-a0b6-52b137ce779e.jpeg', '80b2bd58-eaf5-4d44-96c2-b1da0a2b9f81.jpg', '818c08fb-5942-41f3-a9b8-40bdc923172e.png', '1f69ed29-89ee-4806-8fe5-34a2cd09220d.jpg', '9fe3d498-2788-4d67-b747-2a860b5f5835.png', '4cc88743-11ec-469b-96c5-52c17f5f6393.png', '7ea8585e-1302-4811-94c8-e224fea407d0.jpeg']"
  },
  {
    "objectID": "posts/is-it-hacked-creating-a-model-from-your-own-data.html#step-2-train-our-model",
    "href": "posts/is-it-hacked-creating-a-model-from-your-own-data.html#step-2-train-our-model",
    "title": "Using fast.ai to detect web defacement",
    "section": "Step 2: Train our model",
    "text": "Step 2: Train our model\nSome photos might not download correctly which could cause our model training to fail, so we’ll remove them:\n\nfailed = verify_images(get_image_files(path))\nfailed.map(Path.unlink)\nlen(failed)\n\n3\n\n\nTo train a model, we’ll need DataLoaders, which is an object that contains a training set (the images used to create a model) and a validation set (the images used to check the accuracy of a model – not used during training). In fastai we can create that easily using a DataBlock, and view sample images from it:\n\ndls = DataBlock(\n    blocks=(ImageBlock, CategoryBlock), \n    get_items=get_image_files, \n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=[Resize(192, method='squish')]\n).dataloaders(path, bs=32)\n\ndls.show_batch(max_n=9)\n\n\n\n\nHere what each of the DataBlock parameters means:\nblocks=(ImageBlock, CategoryBlock),\nThe inputs to our model are images, and the outputs are categories (in this case, “bird” or “forest”).\nget_items=get_image_files, \nTo find all the inputs to our model, run the get_image_files function (which returns a list of all image files in a path).\nsplitter=RandomSplitter(valid_pct=0.2, seed=42),\nSplit the data into training and validation sets randomly, using 20% of the data for the validation set.\nget_y=parent_label,\nThe labels (y values) is the name of the parent of each file (i.e. the name of the folder they’re in, which will be bird or forest).\nitem_tfms=[Resize(192, method='squish')]\nBefore training, resize each image to 192x192 pixels by “squishing” it (as opposed to cropping it).\nNow we’re ready to train our model. The fastest widely used computer vision model is resnet18. You can train this in a few minutes, even on a CPU! (On a GPU, it generally takes under 10 seconds…)\nfastai comes with a helpful fine_tune() method which automatically uses best practices for fine tuning a pre-trained model, so we’ll use that.\n\nlearn = vision_learner(dls, resnet50, metrics=error_rate)\nlearn.fine_tune(8)\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n1.161769\n1.304828\n0.454545\n00:01\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.527830\n1.105486\n0.424242\n00:01\n\n\n1\n0.358313\n1.320968\n0.363636\n00:01\n\n\n2\n0.292316\n1.910205\n0.333333\n00:01\n\n\n3\n0.339704\n2.253515\n0.272727\n00:01\n\n\n4\n0.324205\n2.523444\n0.303030\n00:01\n\n\n5\n0.299952\n2.851549\n0.272727\n00:01\n\n\n6\n0.269725\n3.016880\n0.272727\n00:01\n\n\n7\n0.245702\n2.914296\n0.272727\n00:01\n\n\n\n\n\nGenerally when I run this I see 70% (ahah let’s see if it’ll show 100% by the end of the course)accuracy on the validation set (although it might vary a bit from run to run).\n“Fine-tuning” a model means that we’re starting with a model someone else has trained using some other dataset (called the pretrained model), and adjusting the weights a little bit so that the model learns to recognise your particular dataset. In this case, the pretrained model was trained to recognise photos in imagenet, and widely-used computer vision dataset with images covering 1000 categories) For details on fine-tuning and why it’s important, check out the free fast.ai course."
  },
  {
    "objectID": "posts/is-it-hacked-creating-a-model-from-your-own-data.html#step-3-use-our-model-and-build-your-own",
    "href": "posts/is-it-hacked-creating-a-model-from-your-own-data.html#step-3-use-our-model-and-build-your-own",
    "title": "Using fast.ai to detect web defacement",
    "section": "Step 3: Use our model (and build your own!)",
    "text": "Step 3: Use our model (and build your own!)\nLet’s see what our model thinks about that bird we downloaded at the start:\n\nis_defaced,_,probs = learn.predict(PILImage.create('defaced.jpg'))\nprint(f\"This is a: {is_defaced}.\")\nprint(f\"Probability it's a bird: {probs[0]:.4f}\")\n\n\n\n\n\n\n\n\nThis is a: defaced webpage.\nProbability it's a bird: 0.9970\n\n\nGood job, resnet50 (I tried with a bigger model but Jeremy is right.. bigger model doesn’t necessarily mean better results). :)\nSo, as you see, in the space of a few years, creating computer vision classification models has gone from “so hard it’s a joke” to “trivially easy and free”!\nIt’s not just in computer vision. Thanks to deep learning, computers can now do many things which seemed impossible just a few years ago, including creating amazing artworks, and explaining jokes. It’s moving so fast that even experts in the field have trouble predicting how it’s going to impact society in the coming years.\nOne thing is clear – it’s important that we all do our best to understand this technology, because otherwise we’ll get left behind!\nNow it’s your turn. Click “Copy & Edit” and try creating your own image classifier using your own image searches!\nIf you enjoyed this, please consider clicking the “upvote” button in the top-right – it’s very encouraging to us notebook authors to know when people appreciate our work."
  }
]